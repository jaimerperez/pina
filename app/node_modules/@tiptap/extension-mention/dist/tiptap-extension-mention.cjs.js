'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@tiptap/core');
var Suggestion = require('@tiptap/suggestion');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Suggestion__default = /*#__PURE__*/_interopDefaultLegacy(Suggestion);

const Mention = core.Node.create({
    name: 'mention',
    defaultOptions: {
        HTMLAttributes: {},
        renderLabel({ options, node }) {
            var _a;
            return `${options.suggestion.char}${(_a = node.attrs.label) !== null && _a !== void 0 ? _a : node.attrs.id}`;
        },
        suggestion: {
            char: '@',
            command: ({ editor, range, props }) => {
                editor
                    .chain()
                    .focus()
                    .insertContentAt(range, [
                    {
                        type: 'mention',
                        attrs: props,
                    },
                    {
                        type: 'text',
                        text: ' ',
                    },
                ])
                    .run();
            },
            allow: ({ editor, range }) => {
                return editor.can().insertContentAt(range, { type: 'mention' });
            },
        },
    },
    group: 'inline',
    inline: true,
    selectable: false,
    atom: true,
    addAttributes() {
        return {
            id: {
                default: null,
                parseHTML: element => {
                    return {
                        id: element.getAttribute('data-id'),
                    };
                },
                renderHTML: attributes => {
                    if (!attributes.id) {
                        return {};
                    }
                    return {
                        'data-id': attributes.id,
                    };
                },
            },
            label: {
                default: null,
                parseHTML: element => {
                    return {
                        label: element.getAttribute('data-label'),
                    };
                },
                renderHTML: attributes => {
                    if (!attributes.label) {
                        return {};
                    }
                    return {
                        'data-label': attributes.label,
                    };
                },
            },
        };
    },
    parseHTML() {
        return [
            {
                tag: 'span[data-mention]',
            },
        ];
    },
    renderHTML({ node, HTMLAttributes }) {
        return [
            'span',
            core.mergeAttributes({ 'data-mention': '' }, this.options.HTMLAttributes, HTMLAttributes),
            this.options.renderLabel({
                options: this.options,
                node,
            }),
        ];
    },
    renderText({ node }) {
        return this.options.renderLabel({
            options: this.options,
            node,
        });
    },
    addKeyboardShortcuts() {
        return {
            Backspace: () => this.editor.commands.command(({ tr, state }) => {
                let isMention = false;
                const { selection } = state;
                const { empty, anchor } = selection;
                if (!empty) {
                    return false;
                }
                state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {
                    if (node.type.name === this.name) {
                        isMention = true;
                        tr.insertText(this.options.suggestion.char || '', pos, pos + node.nodeSize);
                        return false;
                    }
                });
                return isMention;
            }),
        };
    },
    addProseMirrorPlugins() {
        return [
            Suggestion__default['default']({
                editor: this.editor,
                ...this.options.suggestion,
            }),
        ];
    },
});

exports.Mention = Mention;
exports.default = Mention;
//# sourceMappingURL=tiptap-extension-mention.cjs.js.map
