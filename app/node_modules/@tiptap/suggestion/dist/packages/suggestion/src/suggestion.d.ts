import { Editor, Range } from '@tiptap/core';
import { Plugin } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
export interface SuggestionOptions {
    editor: Editor;
    char?: string;
    allowSpaces?: boolean;
    startOfLine?: boolean;
    decorationTag?: string;
    decorationClass?: string;
    command?: (props: {
        editor: Editor;
        range: Range;
        props: any;
    }) => void;
    items?: (query: string) => any[];
    render?: () => {
        onStart?: (props: SuggestionProps) => void;
        onUpdate?: (props: SuggestionProps) => void;
        onExit?: (props: SuggestionProps) => void;
        onKeyDown?: (props: SuggestionKeyDownProps) => boolean;
    };
    allow?: (props: {
        editor: Editor;
        range: Range;
    }) => boolean;
}
export interface SuggestionProps {
    editor: Editor;
    range: Range;
    query: string;
    text: string;
    items: any[];
    command: (props: any) => void;
    decorationNode: Element | null;
    clientRect: (() => DOMRect) | null;
}
export interface SuggestionKeyDownProps {
    view: EditorView;
    event: KeyboardEvent;
    range: Range;
}
export declare function Suggestion({ editor, char, allowSpaces, startOfLine, decorationTag, decorationClass, command, items, render, allow, }: SuggestionOptions): Plugin<any, any>;
