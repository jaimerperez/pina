{"version":3,"file":"vue-mention.min.js","sources":["../../../node_modules/textarea-caret/index.js","../src/index.js"],"sourcesContent":["/* jshint browser: true */\n\n(function () {\n\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\nvar properties = [\n  'direction',  // RTL support\n  'boxSizing',\n  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height',\n  'overflowX',\n  'overflowY',  // copy the scrollbar for IE\n\n  'borderTopWidth',\n  'borderRightWidth',\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderStyle',\n\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle',\n  'fontVariant',\n  'fontWeight',\n  'fontStretch',\n  'fontSize',\n  'fontSizeAdjust',\n  'lineHeight',\n  'fontFamily',\n\n  'textAlign',\n  'textTransform',\n  'textIndent',\n  'textDecoration',  // might not make a difference, but better be safe\n\n  'letterSpacing',\n  'wordSpacing',\n\n  'tabSize',\n  'MozTabSize'\n\n];\n\nvar isBrowser = (typeof window !== 'undefined');\nvar isFirefox = (isBrowser && window.mozInnerScreenX != null);\n\nfunction getCaretCoordinates(element, position, options) {\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  var debug = options && options.debug || false;\n  if (debug) {\n    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if (el) el.parentNode.removeChild(el);\n  }\n\n  // The mirror div will replicate the textarea's style\n  var div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n\n  var style = div.style;\n  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n  var isInput = element.nodeName === 'INPUT';\n\n  // Default textarea styles\n  style.whiteSpace = 'pre-wrap';\n  if (!isInput)\n    style.wordWrap = 'break-word';  // only for textarea-s\n\n  // Position off-screen\n  style.position = 'absolute';  // required to return coordinates properly\n  if (!debug)\n    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n\n  // Transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      style.lineHeight = computed.height;\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height))\n      style.overflowY = 'scroll';\n  } else {\n    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position);\n  // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (isInput)\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n\n  var span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n    left: span.offsetLeft + parseInt(computed['borderLeftWidth']),\n    height: parseInt(computed['lineHeight'])\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\nif (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n  module.exports = getCaretCoordinates;\n} else if(isBrowser) {\n  window.getCaretCoordinates = getCaretCoordinates;\n}\n\n}());\n","import Mentionable from './Mentionable.vue'\n\nexport {\n  Mentionable,\n}\n\nfunction registerComponents (Vue, prefix) {\n  Vue.component(`${prefix}mentionable`, Mentionable)\n  Vue.component(`${prefix}Mentionable`, Mentionable)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n\n// Auto-install\nlet GlobalVue = null\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin)\n}\n"],"names":["properties","isBrowser","isFirefox","window","mozInnerScreenX","module","element","position","options","Error","debug","el","document","querySelector","parentNode","removeChild","div","createElement","id","body","appendChild","style","computed","getComputedStyle","currentStyle","isInput","nodeName","whiteSpace","wordWrap","visibility","forEach","prop","lineHeight","height","scrollHeight","parseInt","overflowY","overflow","textContent","value","substring","replace","span","coordinates","top","offsetTop","left","offsetLeft","backgroundColor","plugin","version","VERSION","install","Vue","finalOptions","Object","assign","installComponents","componentsPrefix","prefix","component","Mentionable","registerComponents","GlobalVue","global","use"],"mappings":"gkCAEC,IAMGA,EA0CAC,EACAC,EA3CAF,EAAa,CACf,wBAEA,iBAEA,YACA,6BAGA,mBACA,oBACA,kBACA,cAEA,aACA,eACA,gBACA,0BAIA,cACA,aACA,cACA,WACA,iBACA,aACA,aAEA,YACA,gBACA,aACA,iCAGA,cAEA,UACA,cAIEC,EAA+B,oBAAXE,OACpBD,EAAaD,GAAuC,MAA1BE,OAAOC,gBAiFnCC,mBA/E2BC,EAASC,EAAUC,OACzCP,QACG,IAAIQ,MAAM,sFAGdC,EAAQF,GAAWA,EAAQE,QAAS,KACpCA,EAAO,KACLC,EAAKC,SAASC,cAAc,6CAC5BF,GAAIA,EAAGG,WAAWC,YAAYJ,OAIhCK,EAAMJ,SAASK,cAAc,OACjCD,EAAIE,GAAK,2CACTN,SAASO,KAAKC,YAAYJ,OAEtBK,EAAQL,EAAIK,MACZC,EAAWnB,OAAOoB,iBAAmBpB,OAAOoB,iBAAiBjB,GAAWA,EAAQkB,aAChFC,EAA+B,UAArBnB,EAAQoB,SAGtBL,EAAMM,WAAa,WACdF,IACHJ,EAAMO,SAAW,cAGnBP,EAAMd,SAAW,WACZG,IACHW,EAAMQ,WAAa,UAGrB7B,EAAW8B,SAAQ,SAAUC,GACvBN,GAAoB,eAATM,EAEbV,EAAMW,WAAaV,EAASW,OAE5BZ,EAAMU,GAAQT,EAASS,MAIvB7B,EAEEI,EAAQ4B,aAAeC,SAASb,EAASW,UAC3CZ,EAAMe,UAAY,UAEpBf,EAAMgB,SAAW,SAGnBrB,EAAIsB,YAAchC,EAAQiC,MAAMC,UAAU,EAAGjC,GAGzCkB,IACFT,EAAIsB,YAActB,EAAIsB,YAAYG,QAAQ,MAAO,UAE/CC,EAAO9B,SAASK,cAAc,QAMlCyB,EAAKJ,YAAchC,EAAQiC,MAAMC,UAAUjC,IAAa,IACxDS,EAAII,YAAYsB,OAEZC,EAAc,CAChBC,IAAKF,EAAKG,UAAYV,SAASb,EAAQ,gBACvCwB,KAAMJ,EAAKK,WAAaZ,SAASb,EAAQ,iBACzCW,OAAQE,SAASb,EAAQ,oBAGvBZ,EACFgC,EAAKrB,MAAM2B,gBAAkB,OAE7BpC,SAASO,KAAKJ,YAAYC,GAGrB2B,2+OCrHHM,EAAS,CAEbC,QAASC,QACTC,iBAASC,EAAK7C,OACN8C,EAAeC,OAAOC,OAAO,GAAI,CACrCC,mBAAmB,EACnBC,iBAAkB,IACjBlD,GAEC8C,EAAaG,mBAdrB,SAA6BJ,EAAKM,GAChCN,EAAIO,oBAAaD,iBAAqBE,GACtCR,EAAIO,oBAAaD,iBAAqBE,GAalCC,CAAmBT,EAAKC,EAAaI,oBAQvCK,EAAY,WACM,oBAAX5D,OACT4D,EAAY5D,OAAOkD,IACQ,oBAAXW,SAChBD,EAAYC,OAAOX,KAEjBU,GACFA,EAAUE,IAAIhB"}