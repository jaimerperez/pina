.taskContainer {
  color: red;
  width: 1920px;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["webpack:///./assets/components/user/userNavBar/Board/TaskList.vue"],"names":[],"mappings":"AAopBA;EACA;EACA;AACA","file":"app.css","sourcesContent":["<template>\n<div v-show=\"taskList.store == '0'\" :id=\"taskList.id\">\n   <div class=\"task-container flex flex-row text-fontColor-primary hover:bg-gray-200 cursor-pointer\" style=\"width:3000px\" >\n        <SlidePanel v-show=\"opentab\" :name=\"taskList.name\" :id=\"taskList.id\" :message=\"messages\" :users=\"usuarios\" :task=\"true\" :opentab=\"opentab\"/>\n            <!-- NOMBRE Y COMENTARIOS --> \n                <div class=\"w-80 hover:text-indigo-600 border border-white align-middle px-4\">\n                    <!-- <input type=\"checkbox\"> -->\n                    <span  class=\"flex justify-between group pt-2\"  @mouseover=\"editHidden = true\" @mouseleave=\"editHidden = false\">\n                        <input type=\"checkbox\" v-model=\"selected\" :name=\"taskList.id\" :value=\"taskList.id\" class=\"mx-2\">\n                        <p class=\"truncate px-2\" :contenteditable=\"true\" v-on:blur=\"editName(taskList.id, taskList.name)\" :id=\"taskList.name\" ref=\"input\" :title=\"taskList.name\">{{taskList.name}}</p> \n                        <icon-base v-show=\"editHidden\" viewBox=\"0 0 1080 1080\"  width=\"25\" height=\"25\" icon-name=\"editar\" @click.native=\"focusName\" class=\"cursor-pointer inline-block\"><Editar/></icon-base>\n                        \n                        <span class=\"relative inline-block\" v-on:click=\"opentab=!opentab\">\n                            <icon-base :iconColor=\"color\" width=\"25\" height=\"25\" icon-name=\"message\" ><Message/></icon-base>\n                            <span v-if=\"numbermessage != 0\" class=\"absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full\">{{numbermessage}}\n                            </span>\n                         </span>\n                    </span>\n                    \n                </div>\n                    <!-- SUBELEMTENTOS -->\n                    <div class=\"w-20 hover:text-indigo-600 border border-white align-middle px-2\" v-on:click=\"showSubtask\">\n                        <span class=\"flex justify-center pt-2\"><icon-base :iconColor=\"color\" width=\"25\" height=\"25\" icon-name=\"message\"><List/></icon-base>\n                            <span v-if=\"numberSubtask != 0\" class=\"inline-flex items-center justify-center px-2 py-1 mr-2 text-xs font-bold leading-none text-red-100 bg-red-600 rounded-full\">{{numberSubtask}}</span>\n                        </span>\n                    </div>\n                    \n                    <!-- RESPONSABLES -->\n                    <div class=\"w-32 hover:text-indigo-600 border border-white group\" @mouseover=\"addUser = true\" @mouseleave=\"addUser = false\">\n                        <div class=\"flex flex-row flew-nowrap\">\n                                <button v-popover.bottom=\"{name: taskList.id}\" :class=\"[addUser ? 'visible' : 'invisible']\" class=\"rounded-full p-2 focus:outline-none transition duration-200\">\n                                    <icon-base class=\"cursor-pointer\" width=\"14\" height=\"14\" viewBox=\"0 0 512 512\" icon-name=\"add\"><Add/></icon-base>\n                                </button>\n                            <div class=\"flex flex-row\" v-popover.bottom=\"{name: 'resp' + taskList.id}\">\n                                <div v-for=\"(items,index) in taskList.users\" :key=\"items.id\" class=\"flex flex-row\" > \n                                    <div v-if=\"index > 1\">\n                                    </div>\n                                    <div v-else>\n                                        <img class=\"rounded-full w-8 h-8\" :title=\"searchForUsersName(items.id_user)\" :src=\"`/assets/images/users/${items.id_user}`\">\n                                    </div>\n                                </div>\n                                <div v-if=\"size > 2\" class=\"mx-2\">\n                                    ...\n                                </div>\n                            </div>    \n                        </div>\n                         \n                    </div>\n                \n                    <!-- ARCHIVOS -->\n                    <div class=\"w-32 hover:text-indigo-600 border border-white align-middle\" @mouseover=\"act = true\" @mouseleave=\"act = false\">\n                        <input type=\"file\" class=\"hidden\" ref=\"file\" id=\"files\" name=\"files\" @change=\"update\">\n                        <div class=\"flex justify-center flex-col\">\n                            <button v-show=\"act\" @click=\"browse()\" class=\"rounded-full p-2 focus:outline-none transition duration-200\">\n                                <icon-base class=\"cursor-pointer\" width=\"25\" height=\"25\" viewBox=\"0 0 512 512\" icon-name=\"add\" ><Add/></icon-base>\n                            </button>\n                            <div  class=\"flex flex-col\" v-for=\"items in taskList.files\" :key=\"items.id\">\n                                <div v-show=\"items.name\" class=\"flex\" @mouseover=\"deletebutton = true\" @mouseleave=\"deletebutton = false\" >\n                                    <a :href=\"`/assets/files/${items.name}`\" download=\"file\">\n                                        <icon-base viewBox=\"0 0 384 512\" width=\"25\" height=\"25\"><File /></icon-base>\n                                    </a>\n                                    <button v-show=\"deletebutton\" class=\"rounded-full w-5 h-5 bg-white text-black self-center\" v-on:click=\"deleteFile(items.name)\">X</button>\n                                </div>\n                            </div>\n                        </div>                \n                    </div>\n                \n                 <!-- TAGS -->\n                \n                    <!-- PRIORIDAD -->\n                    <div class=\"w-52 hover:text-indigo-600 border border-white align-middle\" >\n                        <div  v-for=\"items in tagsList.tags\" :key=\"items.id\">\n                                <div  v-for=\"el in taskList.tags\" :key=\"el.id\">\n                                    <div  v-if=\"items.id == el.id_tag\">\n                                        <div v-if=\"items.id_type == 1\" v-popover:prioridad.bottom v-on:click=\"setID=taskList.id\">\n                                            <Tag :tagName=\"items.name\"/>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    </div>\n\n                    <!-- AUTORIZACION -->\n                    <div class=\"w-52 hover:text-indigo-600 border border-white align-middle\">\n                        <div v-for=\"items in tagsList.tags\" :key=\"items.id\">\n                            <div v-for=\"el in taskList.tags\" :key=\"el.id\">\n                                <div v-if=\"items.id == el.id_tag\">\n                                    <span v-if=\"items.id_type=='2'\" v-popover:autorizacion.bottom  v-on:click=\"setID=taskList.id\">\n                                        <Tag :tagName=\"items.name\"/>\n                                        \n                                    </span>\n                                </div>\n                            </div>\n                        </div>                \n                    </div>\n\n                    <!-- HACIENDOSE -->\n                    <div class=\"w-52 hover:text-indigo-600 border border-white align-middle\">\n                        <h1 v-for=\"items in tagsList.tags\" :key=\"items.id\">\n                            <div v-for=\"el in taskList.tags\" :key=\"el.id\">\n                                <div v-if=\"items.id == el.id_tag\">\n                                    <div v-if=\"items.id_type=='3'\" v-popover:haciendose.bottom v-on:click=\"setID=taskList.id\">\n                                        <Tag :tagName=\"items.name\"/>\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </h1>                        \n                    </div>\n\n                    <!-- ENTREGADO -->\n                    <div class=\"w-52 hover:text-indigo-600 border border-white align-middle\">\n                        <h1 v-for=\"items in tagsList.tags\" :key=\"items.id\">\n                            <div v-for=\"el in taskList.tags\" :key=\"el.id\">\n                            <div v-if=\"items.id == el.id_tag\">\n                                <div v-if=\"items.id_type=='4'\" v-popover:entregado.bottom v-on:click=\"setID=taskList.id\">\n                                    <Tag :tagName=\"items.name\"/>\n                                </div>\n                            </div>\n                            </div>\n                        </h1>                         \n                    </div>\n                \n                <!-- PLAZO, PROGRESO, TIEMPOS, UPDATE, ID, EMAIL, BORRAR -->\n                \n                    <!-- PLAZO -->\n                    <div  class=\"w-80 border border-white items-center align-middle\">\n                        <div class=\"items-center align-middle pt-2\">\n                            <DatePicker :date=\"taskList.time_limit\" :dateend=\"taskList.time_limit_end\" :taskStatus=\"taskList.id_status\" :id_task=\"taskList.id\"/>\n                        </div>\n                    </div>\n\n                    <!-- PROGRESO -->\n                    <div class=\"w-32 hover:text-indigo-600 border border-white items-center align-middle\">\n                        \n                        <div v-if=\"taskList.progress == '0'\" class=\"flex justify-between\">\n                            <div class=\"w-1 bg-block-complete-primary rounded inline-block\"></div>0%\n                        </div>\n                        <div v-else-if=\"taskList.progress <= '10'\" class=\"flex justify-between\">\n                            <div class=\"w-1/5 bg-block-complete-primary rounded inline-block\"></div>10%\n                        </div>\n                        <div v-else-if=\"taskList.progress <= '30'\" class=\"flex justify-between\">\n                            <div class=\"w-2/6 bg-block-complete-primary rounded inline-block\"></div>30%\n                        </div>\n                        <div v-else-if=\"taskList.progress <= '40'\" class=\"flex justify-between\">\n                            <div class=\"w-2/5 bg-block-complete-primary rounded inline-block\"></div>40%\n                        </div>\n                        <div v-else-if=\"taskList.progress <= '60'\" class=\"flex justify-between\">\n                            <div class=\"w-3/5 bg-block-complete-primary rounded inline-block\"></div>60%\n                        </div>\n                        <div v-else-if=\"taskList.progress <= '70'\" class=\"flex justify-between\">\n                            <div class=\"w-4/6 bg-block-complete-primary rounded inline-block\"></div>70%\n                        </div>\n                        <div v-else-if=\"taskList.progress <= '90'\" class=\"flex justify-between\">\n                            <div class=\"w-11/12 bg-block-complete-primary rounded inline-block\"></div>90%\n                        </div>\n                        <div v-else class=\"flex\">\n                            <div class=\"w-full bg-block-complete-primary rounded inline-block\"></div>100%\n                        </div>               \n                    </div>\n\n                    <!-- TIEMPOS -->\n                    <div class=\"w-32 hover:text-indigo-600 border border-white align-middle\" >\n                        <span class=\"flex justify-center pt-2\" @click=\"play(taskList.id)\">\n                            <icon-base :iconColor=\"color\" width=\"25\" height=\"25\" icon-name=\"Play\" v-show=\"taskList.pause == 1\"><Play/></icon-base>\n                            <icon-base :iconColor=\"color\" width=\"25\" height=\"25\" icon-name=\"Pause\" v-show=\"taskList.pause == 0\"><Pause/></icon-base>\n                            {{tiempo}}\n                        </span> \n                        <div v-popover.bottom=\"{name: 'tiempo' + taskList.id}\">\n                            <icon-base  class=\"cursor-pointer\" width=\"14\" height=\"14\" viewBox=\"0 0 512 512\" icon-name=\"add\"><Add/></icon-base>\n                        </div>        \n                    </div>\n                    <!-- ULTIMA ACTUALIZACION -->\n                    <div class=\"w-80 hover:text-indigo-600 border border-white align-middle \">\n                        <span class=\"flex justify-center pt-2\">\n                            <ImageMembers class=\"w-5 h-5 ml-2 pt-2\" :ID=\"taskList.id_user_update\" :toprofile=\"true\"/>\n                            <span class=\"relative inline-block px-2\">{{taskList.updated_at}}</span>\n                        </span>\n                    </div>\n                    <!-- ID -->\n                    <div class=\"w-32 pt-2 hover:text-indigo-600 border border-white align-middle\">\n                        <span class=\"flex justify-center\">{{taskList.id}} </span>        \n                    </div>\n                    <!-- CORREO -->\n                    <div class=\"w-52 hover:text-indigo-600 border border-white align-middle\">\n                        <span class=\"flex justify-center\"></span>\n                        {{taskList.email}}             \n                    </div>\n                    <!-- BORRAR TAREA -->\n                    <div class=\"w-32 flex justify-center items-center hover:text-indigo-600 border border-white align-middle\" @click=\"show\">\n                        <icon-base viewBox=\"0 0 512 512\" width=\"25\" height=\"25\" icon-name=\"trash\" ><Trash/></icon-base>\n                    </div>\n                \n        \n        <!-- POPOVERS Y MODALES   -->\n        \n        <Popper v-if=\"taskList.id == setID\" :name=\"'prioridad'\" :taskListId=\"setID\" @click=\"reset\"/>\n\n        <Popper v-if=\"taskList.id == setID\" :name=\"'autorizacion'\" :taskListId=\"setID\" @click=\"reset\"/>\n\n        <Popper v-if=\"taskList.id == setID\" :name=\"'haciendose'\" :taskListId=\"setID\" @click=\"reset\"/>\n\n        <Popper v-if=\"taskList.id == setID\" :name=\"'entregado'\" :taskListId=\"setID\" @click=\"reset\"/>\n        \n        <modal :name=\"taskList.id\">\n            <div>\n                Desea Eliminar la tarea\n                <div class=\"flex flex-row justify-evenly mt-10\">\n                    <button @click=\"deleteTask\" class=\"bg-green-500 text-white w-10\">SI</button>\n                    <button @click=\"hide\" class=\"bg-red-500 text-white w-10\">NO</button>\n                </div>\n            </div>\n        </modal>\n\n        <popover :name=\"taskList.id\" :width=\"450\">\n            <div v-for=\"user in responsable\" :key=\"user.id\">\n               <div v-if=\"!searchForManager(user.id_user)\">\n                       <div v-if=\"searchForUsersName(user.id_user)\" @click=\"addManager(user.id_user, taskList.id)\">\n                           <img class=\"rounded-full w-8 h-8\" :title=\"searchForUsersName(user.id_user)\" :src=\"`/assets/images/users/${user.id_user}`\">\n                            {{searchForUsersName(user.id_user)}}\n                       </div>\n               </div>\n            </div>\n        </popover>\n        \n        <popover :name=\"'resp' + taskList.id\" :width=\"450\">\n            <div v-for=\"user in responsable\" :key=\"user.id\">\n               <div v-if=\"searchForManager(user.id_user)\" class=\"flex flex-row\">\n                        <img class=\"rounded-full w-8 h-8\" :title=\"searchForUsersName(user.id_user)\" :src=\"`/assets/images/users/${user.id_user}`\">\n                        <span>{{searchForUsersName(user.id_user)}}</span>\n                        <button class=\"rounded-full w-5 h-5 bg-white text-black self-center\" v-on:click=\"deleteManager(user.id_user, taskList.id)\">X</button>\n               </div>\n            </div>\n        </popover>\n        <popover :name=\"'tiempo' + taskList.id\" :width=\"150\">\n            <div class=\"items-center\">\n               Añadir sesión manualmente\n               <div>\n                   <input  class=\"border border-dotted\" type=\"number\" min=\"00\" max=\"99\" v-model=\"horas\">:\n                   <input  class=\"border border-dotted\" type=\"number\" min=\"00\" max=\"59\" v-model=\"minutos\">      \n               </div>\n               <button class=\"rounded-lg bg-sideBar-primary text-white\" @click=\"setTime()\">ENVIAR</button>\n            </div>\n        </popover>\n        \n    </div>\n        <div v-if=\"showed\" class=\"ml-16 mb-5\">\n            <SubTask />\n            <SubtaskList \n                class=\" text-fontColor-primary \" \n                v-for=\"subtask in taskList.subtasks\" \n                :key=\"subtask.id\"\n                :teamid=\"teamid\"\n                :subtask=\"subtask\"\n                :color=\"color\"\n            />\n            <input v-show=\"showed\" contenteditable=\"true\"  @change=\"createSubtask(taskList.id)\" placeholder=\"+ Nueva Subtarea\" v-model=\"nameSubtask\" class=\"border text-fontColor-primary bg-white w-full focus:outline-none focus:ring focus:border-blue-300\" :class=\"color\">\n            \n        </div>\n</div>\n</template>\n\n<script>\nimport Vue from 'vue'\n  import VueConfetti from 'vue-confetti'\n  \nimport {EventBus} from '../../../../event-bus.js'\nimport Popover from 'vue-js-popover'\nimport Draggable from 'vuedraggable'\nimport IconBase from '../../../icons/IconBase.vue'\nimport Add from '../../../icons/Add.vue'\nimport Editar from '../../../icons/Editar.vue'\nimport File from '../../../icons/File.vue'\nimport Message from '../../../icons/Message'\nimport Trash from '../../../icons/Trash'\nimport List from '../../../icons/List'\nimport Tag from './popover/Tag'\nimport Popper from './popover/Popper'\nimport {getAllTags, getAllUsers, getUserTeams, postEditName, getMessage, postMessage } from '../../../../servicies/userServicies'\nimport Play from '../../../icons/Play.vue'\nimport Pause from '../../../icons/Pause.vue'\nimport DatePicker from './subitems/DatePicker'\nimport SubTask from './subitems/SubTask'\nimport SubtaskList from './subitems/SubtaskList'\nimport SlidePanel from './subitems/SlidePanel'\nimport ImageMembers from '../Welcome/tabs/ImageMembers'\nimport DateRangePicker from 'vue2-daterange-picker'\n//you need to import the CSS manually\nimport 'vue2-daterange-picker/dist/vue2-daterange-picker.css'\nVue.use(Popover)\nVue.use(VueConfetti)\n\nexport default {\n    components: {\n        Draggable,\n        IconBase,\n        Message,\n        List,\n        Tag,\n        Play,\n        Pause,\n        Popper, \n        Trash,\n        SubTask,\n        DatePicker,\n        ImageMembers,\n        DateRangePicker,\n        Add, \n        SubtaskList,\n        SlidePanel,\n        File,\n        Editar,\n      \n    },\n    props: {\n        taskList: Object,\n        color: String,\n        taskTag: Array,\n        taskStatus: String,\n        draggable: Boolean,\n        id: String,\n        teamid: String,\n        progress: Number,\n    },\n    data() {\n        return{\n            date: new Date().toISOString().substr(0, 10),\n            tagsList: [],\n            responsable: [],\n            usuarios: [],\n            messages: [],\n            active: true,\n            setID: '',\n            modal: false,   \n            numberSubtask: '',\n            numbermessage: '',\n            tiempo: null,\n            act: false,\n            deletebutton: false,\n            file: null,\n            parar: null,\n            addUser: false,\n            ID: '',\n            deletemanager: false,\n            showed: false,\n            nameSubtask: '',\n            editHidden: false,\n            contentEdit: false,\n            selected: [],\n\t\t    selectAll: false,\n            state: '',\n            opentab: false,\n            count: 0,\n            size: 0,\n            horas: 0,\n            minutos: 0,\n            \n        }\n    },\n   created() {\n        this.fetchData()\n        this.selectAll = false\n        \n        if(this.taskList.pause == 0)\n            var parar = setInterval(() => {\n                this.time()\n            }, 1000);\n        else{\n            this.time()\n            clearInterval(parar)\n        }\n        \n            \n    },\n     mounted(){\n        EventBus.$on('checkbox', this.select)\n        EventBus.$on('deleteselected', this.deleteSelectedTask)\n        EventBus.$on('storeselected', this.storeSelectedTask)\n        EventBus.$on('reset', this.reset);\n        EventBus.$on('closeslidepanel', this.closeSlide)\n        EventBus.$on('updatemessage', this.fetchData)\n        EventBus.$on('deletemessage', this.fetchData)\n        EventBus.$on('confeti', this.start)\n        \n        this.date = this.taskList.time_limit\n        this.numberSubtask = this.taskList.subtasks.length\n        this.numbermessage = this.taskList.messages\n        this.size = this.taskList.users.length\n        this.ID = this.teamid\n        \n    } ,\n    watch: {\n    '$route': 'fetchData',\n    taskList(){\n        if(this.taskList.pause == 0)\n            setInterval(() => {\n                this.time()\n            }, 1000);\n        else\n            this.time() \n    }\n  },\n    methods:{\n        fetchData() {\n            const token = localStorage.getItem('validation_token');\n           getAllTags(token)\n            .then(data => (this.tagsList = data));\n            \n            getUserTeams(token,this.teamid)\n                .then(data => (this.responsable = data));\n                \n            getAllUsers(token)\n                .then(data => (this.usuarios = data));\n           \n            getMessage(token, this.taskList.id)\n            .then(data =>{ (this.messages = data) });\n               \n        },\n        closeSlide(){\n            this.opentab = false\n        },\n        contador(){\n            this.count + 1\n        },\n        onInput(){\n            console.log('rr')\n        },\n         showModal(status){\n            this.state = status\n            this.$modal.show('deleteSeleccionadas');\n        },\n        hideModal() {\n            this.$modal.hide('deleteSeleccionadas');\n        },\n        deleteSelectedTask(status){\n            let value = document.getElementsByName(this.taskList.id)\n            \n            for(let i of value){\n                 \n                 if(status == this.taskStatus)\n                 {\n                    \n                     if(i.checked)\n                        {\n                            \n                            EventBus.$emit('delete', i.value)\n                        }\n                 }\n                    \n            }\n        },\n        storeSelectedTask(status){\n            let value = document.getElementsByName(this.taskList.id)\n            \n            for(let i of value){\n                 \n                 if(status == this.taskStatus)\n                 {\n                    \n                     if(i.checked)\n                        {\n                            EventBus.$emit('store', i.value)\n                        }\n                 }\n                    \n            }\n        },\n        setTime(){\n            \n            let hours = this.horas * 3600\n            \n            let minuts = this.minutos * 60\n            \n            let totaltime = hours + minuts\n            \n            EventBus.$emit('settime', totaltime, this.taskList.id)\n        },\n        select(status) {\n\n\t\t\tlet value = document.getElementsByName(this.taskList.id)\n            console.log(value)\n            for(let i of value){\n                \n                 if(status == this.taskStatus)\n                 {\n                     \n                     i.checked = !i.checked\n                 }\n                    \n            }\n\t\t},\n        focusName(){\n            console.log('222')\n            this.$refs.input.focus()\n        },\n        editName(id_task,task_name){\n            const valor = document.getElementById(task_name);\n            const text = valor.textContent\n            console.log(text)\n            const token = localStorage.getItem('validation_token');\n            const formData = new FormData()\n            formData.append('name', text);\n            formData.append('token', token);\n          \n            let promise = new Promise((resolve, reject) => {\n                resolve(postEditName(formData, id_task));\n              });\n              promise.then((response) => {\n                console.log(response);\n                this.fetchData()\n              });\n        },\n        browse(){\n            this.$refs.file.click();\n        },\n        reset(){\n            this.setID = ''\n        },\n        progreso(value){\n            this.progress = +value\n        },\n        checkImg(id_user){\n            try {\n                require(`../../../../media/users/${id_user}.png`)\n                return true\n                }\n                catch (e) {\n                    return false\n                }\n        },\n        changeStatus(){\n            EventBus.$emit('changes', 3, this.taskList.id)\n        },\n        createSubtask(id_task){\n           EventBus.$emit('subtask',this.nameSubtask, id_task)\n           this.nameSubtask = ''\n        },\n       \n        deleteTask(){\n            EventBus.$emit('delete',this.taskList.id)\n            this.hide()\n        },\n        showSubtask(){\n            \n            this.showed = !this.showed\n        },\n        toggle(ID,NAME){\n           if(!this.contentEdit)\n            EventBus.$emit('slide',ID, NAME)\n        },\n        show(){\n            this.$modal.show(this.taskList.id);\n        },\n        hide () {\n            this.$modal.hide(this.taskList.id);\n        },\n        play(ID){\n            EventBus.$emit('play', ID)\n            this.fetchData()\n        },\n        deleteFile(filename){\n            EventBus.$emit('deleteFile', filename)\n        },\n         deleteManager(id_manager, id_task){\n             console.log(id_manager)\n             console.log(id_task)\n            EventBus.$emit('deletemanager', id_manager, id_task)\n        },\n        addManager(ID, id_task){\n            console.log('entra')\n            EventBus.$emit('addmanager', ID, id_task)\n        },\n        update(event){\n            this.file = event.target.files[0]\n            EventBus.$emit('updateFiles',this.file,this.taskList.id)\n        },\n        time(){\n            if(this.taskList.pause == 0){\n                let date = new Date()\n                \n                let timezone = Math.abs(date.getTimezoneOffset()/(60))\n                \n                let last_play = new Date(this.taskList.last_play)\n                \n\n                last_play.setHours(last_play.getHours()+timezone)\n              \n\n                let diffDate = date - last_play\n                \n\n                let timeWorking = this.taskList.time_working * 1000//milisegundos\n                \n\n                let final = diffDate + timeWorking\n                \n                \n                this.tiempo = this.secondsToString(final)\n               \n            }\n            else{\n            let milisegundos = this.taskList.time_working * 1000\n            var segundos = Math.floor((milisegundos / 1000) % 60)\n            segundos = (segundos < 10)? '0' + segundos : segundos;\n            \n            var minute = Math.floor((milisegundos / (1000 * 60)) % 60);\n            minute = (minute < 10)? '0' + minute : minute;\n            \n            var hour = Math.floor(milisegundos / (1000 * 60 * 60)) % 24;\n            hour = (hour < 10)? '0' + hour : hour;\n                this.tiempo =  hour + ':' + minute + ':' + segundos\n            }\n        },\n        secondsToString(milisegundos) {\n            \n            var segundos = Math.floor((milisegundos / 1000) % 60)\n            segundos = (segundos < 10)? '0' + segundos : segundos;\n            \n            var minute = Math.floor((milisegundos / (1000 * 60)) % 60);\n            minute = (minute < 10)? '0' + minute : minute;\n            \n            var hour = Math.floor(milisegundos / (1000 * 60 * 60)) % 24;\n            hour = (hour < 10)? '0' + hour : hour;\n            return hour + ':' + minute + ':' + segundos;\n        },\n\n        searchForManager(id_user){\n            for(let items in this.taskList.users)\n            {\n                if(id_user == this.taskList.users[items].id_user)\n                    return true\n            }\n            return false\n        },\n        \n        searchForUsersName(id_user){\n            for(let items of this.usuarios)\n            {\n                if(id_user == items.id)\n                    if(items.name == null)\n                        return items.email\n                    else\n                        return items.name\n            }\n            return false\n        },\n        start() {\n        this.$confetti.start();\n        setTimeout(() => {  this.stop() }, 2000);\n      },\n \n      stop() {\n        this.$confetti.stop();\n      },  \n    },\n       \n}\n</script>\n\n<style>\n.taskContainer {\n    color: red;\n    width: 1920px;\n}\n</style>"],"sourceRoot":""}*/